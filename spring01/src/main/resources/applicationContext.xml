<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!-- =================================================================================================== -->


    <!--创建bean的三种方法-->
    <!--        1.通过构造函数创建-->
    <!--          1.1.默认为无参构造函数-->
    <!--          1.2.使用有参构造函数需要明确配置《<constructor-arg>中的 name index type属性）-->
    <!--通过<bean>创建对象，默认配置文件加载时就创建 id表示获取对象的标识 class表示创建哪个类的对象-->
    <bean id="people" class="com.jhly.springDemo.model.People">
        <constructor-arg name="id" value="1"></constructor-arg>
        <constructor-arg name="name" value="呆毛"></constructor-arg>
    </bean>
    <!--        2.实例工厂 先创建工厂再创建对象-->
    <bean id="factory" class="com.jhly.springDemo.model.PeopleFactory"></bean>
    <bean id="people1" factory-bean="factory" factory-method="newInstance"></bean>
    <!--        3.静态工厂 不需要创建工厂-->
    <bean id="people2" class="com.jhly.springDemo.model.PeopleFactory" factory-method="newInstance1"></bean>


    <!-- =================================================================================================== -->


    <!--    给bean的属性赋值-->
    <!--        1.构造方法注入-->
    <!--        2.set方法注入-->
    <!--        3.注解注入-->
    <bean id="people3" class="com.jhly.springDemo.model.People">
        <property name="id" value="2"></property>
        <property name="name" value="梅林"></property>
        <property name="sets">
            <set>
                <value>1</value>
                <value>2</value>
            </set>
        </property>
        <property name="list">
            <list>
                <value>1</value>
                <value>2</value>
            </list>
        </property>
        <property name="strs">
            <array>
                <value>1</value>
                <value>2</value>
            </array>
        </property>
        <property name="maps">
            <map>
                <entry key="a" value="a1"></entry>
                <entry key="b" value="b1"></entry>
            </map>
        </property>
        <property name="phone" ref="phone"></property>
    </bean>
    <bean id="phone" class="com.jhly.springDemo.model.Phone"></bean>


    <!-- 自动注入 -->
    <!-- autowire:byName:通过bean id 匹配
                  byType:通过class类型匹配（不适用多个同类型）
                  constructor:构造器的参数名称和bean id 一致
                  default:默认不自动注入，如果配置了全局default-autowire="byName" 则以全局为准
                  no:不注入-->
    <bean id="people4" class="com.jhly.springDemo.model.People" autowire="constructor"></bean>


    <!-- =================================================================================================== -->


    <!-- scope属性(默认单例) -->
    <!--     控制对象有效范围：单例、多例等-->
    <bean id="people5" class="com.jhly.springDemo.model.People" scope="prototype"/>

    <!-- =================================================================================================== -->


    <!-- 通过schema-based的方式实现aop 每个通知都需要实现接口或类（MyBeforeAdvice、MyAfterAdvice）
                前置通知实现MethodBeforeAdvice接口
                后置通知实现AfterReturningAdvice接口
                异常通知实现ThrowsAdvice接口
                环绕通知实现MethodInterceptor接口
            在<aop:config>中配置 -->
    <!-- 配置通知类对象，在切面中引入 -->
    <bean id="myBefore" class="com.jhly.springDemo.advice.MyBeforeAdvice"></bean>
    <bean id="myAfter" class="com.jhly.springDemo.advice.MyAfterAdvice"></bean>
    <bean id="myThrow" class="com.jhly.springDemo.advice.MyThrowAdvice"></bean>
    <bean id="myArround" class="com.jhly.springDemo.advice.MyArrountAdvice"></bean>

    <bean id="aopDemo" class="com.jhly.springDemo.model.AOPDemo"></bean>
    <!-- 配置切面 -->
    <!--    <aop:config>-->
    <!--        &lt;!&ndash; 配置切点 &ndash;&gt;-->
    <!--        <aop:pointcut id="myPoint" expression="execution(* com.jhly.springDemo.model.AOPDemo.demo5(..))"/>-->
    <!--        &lt;!&ndash; 通配符的使用 &ndash;&gt;-->
    <!--        &lt;!&ndash; <aop:pointcut id="myPoint" expression="execution(* com.jhly.*.model.*.*(..))"/>&ndash;&gt;-->
    <!--        &lt;!&ndash; 通知 &ndash;&gt;-->
    <!--        <aop:advisor advice-ref="myBefore" pointcut-ref="myPoint"></aop:advisor>-->
    <!--        <aop:advisor advice-ref="myAfter" pointcut-ref="myPoint"></aop:advisor>-->
    <!--        <aop:advisor advice-ref="myThrow" pointcut-ref="myPoint"></aop:advisor>-->
    <!--        <aop:advisor advice-ref="myArround" pointcut-ref="myPoint"></aop:advisor>-->
    <!--    </aop:config>-->


    <!-- =================================================================================================== -->


    <!-- 通过aspectj的方式实现aop 通知不需要实现接口或类 -->
    <bean id="myAdvice" class="com.jhly.springDemo.advice.MyAdvice"></bean>
    <!-- 在<aop:config>的子标签<aop:aspect>中配置-->
    <aop:config>
        <aop:aspect ref="myAdvice">
            <aop:pointcut id="myPointaj"
                          expression="execution(* com.jhly.springDemo.model.AOPDemo.demo5(String,int)) and args(name,age)"/>
            <aop:before method="myBefore" pointcut-ref="myPointaj" arg-names="name,age"></aop:before>
            <!--            <aop:after-returning method="myAftering" pointcut-ref="myPointaj"></aop:after-returning>-->
            <!--            <aop:after method="myAfter" pointcut-ref="myPointaj"></aop:after>-->
            <!--            <aop:after-throwing method="myThrow" pointcut-ref="myPointaj"></aop:after-throwing>-->
            <!--            <aop:around method="myArround" pointcut-ref="myPointaj"></aop:around>-->
        </aop:aspect>
    </aop:config>


    <!-- =================================================================================================== -->

    <!-- 声明式事务 -->
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!-- 配置数据源 -->
<!--    <property name="dataSource" ref=""></property>-->
</bean>
    <!--配置声明式事务-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 配置声明事务的方法
             readonly:true告诉数据库为只读事务，对数据库性能优化有提升，查询方法建议使用
             propagation:控制事务传播行为，当一个具有事务控制的方法被另一个有事务控制的方法调用的时候如何管理事务
                         REQUIRED:如果当前有事务，就在现有事务中执行，如果没有则新建事务执行
                         SUPPORTS:如果当前有事务，就在现有事务中执行，如果没有在非事务状态下执行
                         MANDATORY:必须在事务中执行，如果当前有事务，就在现有事务中执行，如果没有就报错
                         REQUIRES_NEW:必须在事务中执行，如果当前没有事务，就新建事务执行，如果当前有就挂起当前事务
                         NOT_SUPPORTED:必须在非事务下执行，如果当前有事务，就挂起当前事务，如果没有，正常执行
                         NEVER:必须在非事务中执行，如果当前有事务就报错，如果没有，正常执行
                         NESTED:必须在事务中执行，如果当前没有事务，就新建事务执行，如果当前有就新建一个嵌套事务
             isolation：事务隔离级别，在多线程或并发访问下如何保证访问到的数据具有完整性
                        脏读：事务A读取到事务B中未提交的数据，B事务数据发生改变，导致事务A读取到的数据和数据库中数据不一致，此时认为数据是脏数据
                        不可重复读：主要针对的是某行数据，主要针对修改操作，事务A读取事务后事务B对该数据进行修改，导致事务A再次读取该数据与前次不一致
                        幻读：主要针对新增和删除，是两次事务的结果，事务A按某条件查询数据，事务B新增了一条符合条件的数据，导致A事务查询的数据结果与数据库不一致
                    值：DEFAULT 默认值 由底层数据库自动判断使用什么隔离级别
                        READ_UNCOMMITTED 可读取未提交数据 可能出现脏读、不可重复读、幻读，效率最高
                        READ_COMMITTED 只能读取其他事务已提交数据，可防止脏读，可能出现不可重复的、幻读
                        REPEATABLE_READ 读取数据被加锁，防止其他事务修改此数据，可以防止脏读，不可重复读、可能出现幻读
                        SERIALIZABLE 排队操作 对整个表加锁 一个事务操作数据时，其他事务必须等其操作完成后才能操作，最安全、效率最低
             rollback-for：值为某异常的全限定路径，表示当出现该异常时回滚，手动抛异常时一定要赋值
             no-rollback-for:当某异常不需要回滚时使用
             -->
            <tx:method name="ins*"/>
            <tx:method name="del*"/>
            <tx:method name="upd*"/>
            <tx:method name="sel*"/>
            <tx:method name="*" read-only="true" propagation="REQUIRED" isolation="DEFAULT" rollback-for="" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="txpoint" expression="execution(* com.jhly.springDemo.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txpoint"/>
    </aop:config>
</beans>