<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--创建bean的三种方法-->
    <!--        1.通过构造函数创建-->
    <!--          1.1.默认为无参构造函数-->
    <!--          1.2.使用有参构造函数需要明确配置《<constructor-arg>中的 name index type属性）-->
    <!--通过<bean>创建对象，默认配置文件加载时就创建 id表示获取对象的标识 class表示创建哪个类的对象-->
    <bean id="people" class="com.jhly.springDemo.model.People">
        <constructor-arg name="id" value="1"></constructor-arg>
        <constructor-arg name="name" value="呆毛"></constructor-arg>
    </bean>
    <!--        2.实例工厂 先创建工厂再创建对象-->
    <bean id="factory" class="com.jhly.springDemo.model.PeopleFactory"></bean>
    <bean id="people1" factory-bean="factory" factory-method="newInstance"></bean>
    <!--        2.静态工厂 不需要创建工厂-->
    <bean id="people2" class="com.jhly.springDemo.model.PeopleFactory" factory-method="newInstance1"></bean>
    <!--    给bean的属性赋值-->
    <!--        1.构造方法注入-->
    <!--        2.set方法注入-->
    <!--        3.注解注入-->
    <bean id="people3" class="com.jhly.springDemo.model.People">
        <property name="id" value="2"></property>
        <property name="name" value="梅林"></property>
        <property name="sets">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </set>
        </property>
        <property name="list">
            <list>
                <value>1</value>
                <value>2</value>
            </list>
        </property>
        <property name="strs">
            <array>
                <value>1</value>
            </array>
        </property>
        <property name="maps">
            <map>
                <entry key="a" value="a1"></entry>
                <entry key="b" value="b1"></entry>
            </map>
        </property>
        <property name="phone" ref="phone"></property>
    </bean>
    <bean id="phone" class="com.jhly.springDemo.model.Phone"></bean>
    <!-- =================================================================================================== -->
    <!-- 通过schema-based的方式实现aop 每个通知都需要实现接口或类（MyBeforeAdvice、MyAfterAdvice）
                前置通知实现MethodBeforeAdvice接口
                后置通知实现AfterReturningAdvice接口
                异常通知实现ThrowsAdvice接口
                环绕通知实现MethodInterceptor接口
            在<aop:config>中配置 -->
    <!-- 配置通知类对象，在切面中引入 -->
    <bean id="myBefore" class="com.jhly.springDemo.advice.MyBeforeAdvice"></bean>
    <bean id="myAfter" class="com.jhly.springDemo.advice.MyAfterAdvice"></bean>
    <bean id="myThrow" class="com.jhly.springDemo.advice.MyThrowAdvice"></bean>
    <bean id="myArround" class="com.jhly.springDemo.advice.MyArrountAdvice"></bean>

    <bean id="aopDemo" class="com.jhly.springDemo.model.AOPDemo"></bean>
    <!-- 配置切面 -->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 配置切点 &ndash;&gt;-->
<!--        <aop:pointcut id="myPoint" expression="execution(* com.jhly.springDemo.model.AOPDemo.demo5(..))"/>-->
<!--        &lt;!&ndash; 通配符的使用 &ndash;&gt;-->
<!--        &lt;!&ndash; <aop:pointcut id="myPoint" expression="execution(* com.jhly.*.model.*.*(..))"/>&ndash;&gt;-->
<!--        &lt;!&ndash; 通知 &ndash;&gt;-->
<!--        <aop:advisor advice-ref="myBefore" pointcut-ref="myPoint"></aop:advisor>-->
<!--        <aop:advisor advice-ref="myAfter" pointcut-ref="myPoint"></aop:advisor>-->
<!--        <aop:advisor advice-ref="myThrow" pointcut-ref="myPoint"></aop:advisor>-->
<!--        <aop:advisor advice-ref="myArround" pointcut-ref="myPoint"></aop:advisor>-->
<!--    </aop:config>-->
    <!-- =================================================================================================== -->
    <!-- 通过aspectj的方式实现aop 通知不需要实现接口或类 -->
    <bean id="myAdvice" class="com.jhly.springDemo.advice.MyAdvice"></bean>
     <!-- 在<aop:config>的子标签<aop:aspect>中配置-->
    <aop:config>
        <aop:aspect ref="myAdvice">
            <aop:pointcut id="myPointaj" expression="execution(* com.jhly.springDemo.model.AOPDemo.demo5(String,int)) and args(name,age)"/>
            <aop:before method="myBefore" pointcut-ref="myPointaj" arg-names="name,age"></aop:before>
<!--            <aop:after-returning method="myAftering" pointcut-ref="myPointaj"></aop:after-returning>-->
<!--            <aop:after method="myAfter" pointcut-ref="myPointaj"></aop:after>-->
<!--            <aop:after-throwing method="myThrow" pointcut-ref="myPointaj"></aop:after-throwing>-->
<!--            <aop:around method="myArround" pointcut-ref="myPointaj"></aop:around>-->
        </aop:aspect>
    </aop:config>
</beans>